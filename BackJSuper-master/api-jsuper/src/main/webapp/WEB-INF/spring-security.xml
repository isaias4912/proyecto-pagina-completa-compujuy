<?xml version='1.0' encoding='UTF-8' ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:facebook="http://www.springframework.org/schema/social/facebook"
       xmlns:social="http://www.springframework.org/schema/social"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
                http://www.springframework.org/schema/social/facebook http://www.springframework.org/schema/social/spring-social-facebook.xsd
		http://www.springframework.org/schema/social http://www.springframework.org/schema/social/spring-social.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
               
    <http pattern="/oauth/cache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" />
    <http pattern="/oauth/uncache_approvals" security="none" xmlns="http://www.springframework.org/schema/security" />

    <http pattern="/oauth/token"  create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
          use-expressions="true" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="permitAll" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:csrf disabled="true" />
        <sec:custom-filter ref="corsSecurityFilter" before="ANONYMOUS_FILTER"/>
    </http>
     
    <http pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" /> 
        <intercept-url pattern="/api/v1/ventas/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/auth/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/util/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/cajas/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/cajas/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/clientes/existclienteorpersona/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/clientes" method="POST" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/productos/codigobarra/**" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/v1/productos/codigobarraorname" access="hasAnyRole('ROLE_ADMIN','ROLE_CAJERO')" />
        <intercept-url pattern="/api/**" access="hasRole('ROLE_ADMIN')" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:csrf disabled="true" />
        <sec:custom-filter ref="corsSecurityFilter" before="ANONYMOUS_FILTER"/>
    </http>
 
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test/client" />
        <property name="typeName" value="Basic" />
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test" />
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" /> 
    </authentication-manager>
    <authentication-manager id="authenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="customUserDetailService" > 
            <password-encoder ref="encoder" ></password-encoder>
        </authentication-provider>
    </authentication-manager>
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>
    
    <!-- Used for the persistenceof tokens (currently an in memory implementation) -->
    <!--<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />-->

    <!-- Used to create token and and every thing about them except for their persistence that is reposibility of TokenStore (Given here is a             default implementation) -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="oauthTokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails" />
        <property name="tokenEnhancer" ref="jwtAccessTokenConverter" />
    </bean>


    <!-- authorization-server aka AuthorizationServerTokenServices is an interface that defines everything necessary for token management -->
    <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
                                user-approval-handler-ref="userApprovalHandler" >
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>
    <!--esto lo agreugue para hacer el custom del token-->
    <bean id="tokenEnhancer" class="ar.com.jsuper.security.CustomTokenEnhancer" />
    
    <bean id="jwtSigningKey" class="java.lang.String">
        <constructor-arg value="jwtSigningKey"/>
    </bean>
    <!--<bean id="jwtAccessTokenConverter" class="org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter">-->
    <bean id="jwtAccessTokenConverter" class="ar.com.jsuper.security.CustomJWTAccessTokenConverter">
        <property name="signingKey" ref="jwtSigningKey" />
        <property name="accessTokenConverter" ref="tenantAwareAccessTokenConverter" />
    </bean>
    <bean id="tenantAwareAccessTokenConverter" class="ar.com.jsuper.security.TenantAwareAccessTokenConverter">
    </bean>
    <bean id="oauthTokenStore" class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore">
        <constructor-arg ref="jwtAccessTokenConverter"/>
    </bean>


    <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <property name="tokenStore" ref="oauthTokenStore" />
        <property name="requestFactory" ref="oAuth2RequestFactory"/>
    </bean>

    <oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices" />
    
    <!-- ClientsDeailsService: Entry Point to clients database (given is in memory implementation) -->
    <oauth:client-details-service id="clientDetails">
        <!-- client -->
        <oauth:client client-id="clienteswing" 
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      authorities="ROLE_USER" scope="read,write,trust" secret="somesecret" access-token-validity="-1" />
    
        <oauth:client client-id="clienteweb" 
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="somesecret" scope="read,write,trust" authorities="ROLE_USER" access-token-validity="100000"  />
        
    </oauth:client-details-service>

    <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <bean id="oAuth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg ref="clientDetails" />
    </bean>

    <bean id="corsSecurityFilter" class="ar.com.jsuper.security.CORSSecurityFilter"/>
    
    <!--<facebook:config app-id="193336631283398" app-secret="da0c5599cba25c77d94625cc5ed581e3" />-->
</beans>